{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-jsx",
    "path": "/posts/2021-02-04-react-markdown-rendering/",
    "result": {"data":{"markdownRemark":{"html":"<h1>Rendering Markdown in ReactJS</h1>\n<p>This post will take you through my process of creating this markdown renderer you're seeing right now for Markdown.</p>\n<p>My aim is to render each Markdown component cleanly in HTML and have <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>LaTeX</mtext></mrow><annotation encoding=\"application/x-tex\">\\LaTeX</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.89883em;vertical-align:-0.2155em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">L</span><span class=\"mspace\" style=\"margin-right:-0.36em;\"></span><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.68333em;\"><span style=\"top:-2.904999em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"mord\"><span class=\"mord textrm mtight sizing reset-size6 size3\">A</span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:-0.15em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">T</span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.46782999999999997em;\"><span style=\"top:-2.7845em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord textrm\">E</span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2155em;\"><span></span></span></span></span><span class=\"mspace\" style=\"margin-right:-0.125em;\"></span><span class=\"mord textrm\">X</span></span></span></span></span></span></span> renderering.</p>\n<p>For your ease of access, here are links to my code</p>\n<ul>\n<li><a href=\"https://github.com/dustbringer/dustbringer.github.io/blob/main/src/components/Markdown.jsx\"><code>&#x3C;Markdown /></code> component</a></li>\n<li><a href=\"https://github.com/dustbringer/dustbringer.github.io/tree/main/src/components/mdRenderers\">Custom renderers</a></li>\n<li><a href=\"https://github.com/dustbringer/dustbringer.github.io/blob/main/src/components/MarkdownContents.jsx\">Navigatible Contents component</a></li>\n</ul>\n<h2>Foundation</h2>\n<p>We will be using the <a href=\"https://github.com/remarkjs/react-markdown\">ReactMarkdown</a> module that is based on <a href=\"https://github.com/remarkjs/remark\">remark</a>.</p>\n<blockquote>\n<p><strong>remark</strong> is a Markdown processor built on micromark powered by plugins part of the unified collective.</p>\n</blockquote>\n<p>Installing the module is straightfoward</p>\n<pre><code class=\"language-bash\">npm install react-markdown\n</code></pre>\n<pre><code class=\"language-bash\">yarn add react-markdown\n</code></pre>\n<p>Next, the wrapper for the Markdown rendering component will be taken straight from <a href=\"https://levelup.gitconnected.com/adding-katex-and-markdown-in-react-7b70694004ef\">this</a> helpful guide.</p>\n<h3>Variation</h3>\n<p>From the tutorial link above, there are some changes that I made for my purposes.</p>\n<h4>Wrapping <code>div</code></h4>\n<p>I am using Google's MaterialUI to replace the traditional HTML components in many places, so the fonts rendered by primitive HTML tags are default. So we wrap the <code>&#x3C;ReactMarkdown /></code> component with a <code>div</code> with our new fonts and colors, so everything displayed will be consistent.</p>\n<h4>Remark Plugins</h4>\n<p>Since the <code>ReactMarkdown</code> package is made by <code>remark</code>, it supports some of the <code>remark</code> plugins. Not all of the plugins work, from my trial and error, it seems like we can only use ones that do not directly change the source Markdown.</p>\n<p>There is a chonky list of plugins <a href=\"https://github.com/remarkjs/remark/blob/main/doc/plugins.md\">here</a> but I have used <code>remark-math</code>, <code>remark-gfm</code>, and <code>remark-frontmatter</code>.</p>\n<p>You will need to install the packages through <code>npm</code> or <code>yarn</code>, import them into the component we are working on, and add them to the <code>props</code> as</p>\n<pre><code class=\"language-js\">{\r\n  // ...\r\n  plugins: [\r\n    RemarkMathPlugin\r\n  ],\r\n  // ...\r\n}\n</code></pre>\n<h4>Math renderer</h4>\n<p>The basic <code>react-katex</code> package is old and throws some warnings in the newest React versions (17.0.1 at the time of writing). So instead use <a href=\"https://www.npmjs.com/package/@matejmazur/react-katex\">@matejmazur/react-katex</a> which includes many <a href=\"https://github.com/talyssonoc/react-katex/issues/49\">improvements</a> over the original <code>react-katex</code>.</p>\n<p>After installing and importing, the two math renderers will need to be changed as follows</p>\n<pre><code class=\"language-js\">{\r\n  // ...\r\n  math: ({ value }) => &#x3C;TeX block>{value}&#x3C;/TeX>,\r\n  inlineMath: ({ value }) => &#x3C;TeX>{value}&#x3C;/TeX>,\r\n  // ...\r\n}\n</code></pre>\n<h4>More custom renderers</h4>\n<p>See the next section.</p>\n<h2>Custom Renderers</h2>\n<p>Now everthing is rendered in very basic HTML (e.g. <code>p</code>, <code>h1</code>, <code>h2</code>, ...) without any styling, so its not too pleasing to the eye. Fortunately we can write our own custom renderers to replace the default ones.</p>\n<p>We can add them into the props, for example code blocks</p>\n<pre><code class=\"language-js\">renderers: {\r\n    ...props.renderers,\r\n    code: BlockCodeRenderer,\r\n    // ...\r\n  },\n</code></pre>\n<p>we need a component that will replace the default <code>&#x3C;code></code> tags.</p>\n<p>We can find the default renderers and their implementations in the <a href=\"https://github.com/remarkjs/react-markdown/blob/main/src/renderers.js\">git repo</a>. This will tell us the name of the part to be rendered and how information is passed around behind the scenes in the <code>ReactMarkdown</code> component.</p>\n<p>With this starting point, we can see what props are passed to each component and write our own components with custom styling that can render similarly to the original.</p>\n<p>Some more inspiration:</p>\n<ul>\n<li><a href=\"https://github.com/robinweser/react-markdown-github-renderers\">Custom renderers by robinweser</a></li>\n<li><a href=\"https://github.com/dustbringer/dustbringer.github.io/tree/main/src/components/mdRenderers\">The renderers that I wrote</a></li>\n</ul>\n<h2>Anchors (removed)</h2>\n<p>Taking inspiration from Github's and HackMD's Markdown viewer (along with many other sites that have anchors), I tried to tackle the links to headings on the rendered Markdown.</p>\n<p>The little link icon that showed up as you hover over the link, was simple enough. So the difficult part is dealing with the url.</p>\n<p>My website will be hosted on GitHub Pages, where you are forced to use <code>react-router</code>'s <code>HashRouter</code> for routing. Thus, the classic \"just link to a hash with the same id as the heading\" will not work, and we must resort to another method of storing the heading and scrolling.</p>\n<p>To solve the problem of not having the hash part of the URL available, I used the 'search' part of the url to store that data. To scroll, we use React's <code>useRef()</code> hook (by <code>ref.current.scrollIntoView()</code>) to scroll to the correct heading, when the URL search query matches up.</p>\n<ul>\n<li>However, to avoid having to store all the refs in some Global Storage, I run a comparison between the URL search query and the heading's unique name for each heading as it loads in.</li>\n<li>Since the search query only matches to a unique heading, it will be scrolled to with its <code>ref</code></li>\n</ul>\n<h3>How do we generate these unique names?</h3>\n<p>Take the heading content, then run some regex to remove non-alphanumeric characters and replace whitespace. Some of the following is taken and inspired by <a href=\"https://github.com/remarkjs/react-markdown/issues/69\">replies here</a>.</p>\n<p>Get the heading content,</p>\n<pre><code class=\"language-js\">function flatten(text, child) {\r\n  return typeof child === \"string\"\r\n    ? text + child\r\n    : React.Children.toArray(child.props.children).reduce(flatten, text);\r\n}\r\n\r\n// Get text in children\r\nconst children = React.Children.toArray(props.children);\r\nconst text = children.reduce(flatten, \"\");\n</code></pre>\n<p>then strip the bad characters</p>\n<pre><code class=\"language-js\">text\r\n  .toLowerCase()\r\n  .replace(/[^0-9A-Z\\s]+/gi, \"\")\r\n  .replace(/\\W/g, \"-\")\n</code></pre>\n<p>and store an incrementing id outside the functional commponent to keep the generated names unique.</p>\n<h3>Problems</h3>\n<p>Now after adding an initial scroll to a <code>ref</code> if a URL query is present (using the <code>useEffect()</code> hook) everything seems to be working fine. However, on first load of a webpage (without caching), some further titles do not get scrolled to the top of the screen.</p>\n<ul>\n<li>The cause is not immediately apparent to me, but it seems to be due to components that have not rendered before the scrolling starts.</li>\n<li>Without further rewriting the <code>ReactMarkdown</code> module, I decide to abandon the idea in favor of something more practical...</li>\n</ul>\n<h2>Contents List</h2>\n<p>Taking inspiration from HackMD's markdown previewer (and ontop of the failed framework of the anchors), I wrote a component that renders a contents table which can be used for navigation.</p>\n<p>Since the inner workings of <code>ReactMarkdown</code> is hidden from us, I used a janky workaround. It involves storing the heading <code>ref</code>s from the <strong>Anchors</strong> attempt in Global State and using them as links to scroll the user around.</p>\n<p>For this to work, I had to trust that all the headings rendered in the correct order, and displayed the list of <code>ref</code>s and headings on the side with links that scrolls the heading into view. The scrolling, again, is handed by React's <code>ref.current.scrollIntoView()</code>.</p>\n<h2>Conclusion</h2>\n<p>It was very insightful and interesting experience digging into <code>ReactMarkdown</code> and reworking its innards to acheive my view of an \"OKAY\" markdown renderer. Even if some additions were inefficient or work-aroundy to keep ReactMarkdown from falling apart, I still learnt lots about React best practices, components and how they use their props.</p>\n<hr>\n<h2>(Appendix) Helpful Sources</h2>\n<p>Some websites that got me started,</p>\n<ul>\n<li><a href=\"https://levelup.gitconnected.com/adding-katex-and-markdown-in-react-7b70694004ef\">https://levelup.gitconnected.com/adding-katex-and-markdown-in-react-7b70694004ef</a></li>\n<li><a href=\"https://stackoverflow.com/questions/42928530/how-do-i-load-a-markdown-file-into-a-react-component\">https://stackoverflow.com/questions/42928530/how-do-i-load-a-markdown-file-into-a-react-component</a></li>\n</ul>","frontmatter":{"date":"February 04, 2021","slug":"/posts/2021-02-04-React-Markdown-Rendering","title":"Rendering Markdown in ReactJS"}}},"pageContext":{"id":"4408015f-d55e-5cb7-b409-2375284f230f","frontmatter__slug":"/posts/2021-02-04-React-Markdown-Rendering","__params":{"frontmatter__slug":"posts"}}},
    "staticQueryHashes": []}